[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][i][ ][ ]			P( leak in i )
[ ][ ][ ][ ][ ][ ]			P( leak is not in i ) = 1 - P( leak in i )
[ ][j][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]

Prob. Knowledge Base:

    Bot is d-steps away from the leak (shortest path through the ship), the probability of receiving a beep is e^(-a*(d-1)),

    P( leak is in cell j ) for each open cell j
    
    For the cell i the bot is in 
    
        P( leak is in cell i ) = 0
    
    For every other cell j
    
        P( leak is in cell j ) = 1 / (# open cells - 1)
        
At any time t:
    We have that time, bot is located at location bot_t <- cell the bot is in at time t


    We can do two things:
    
        - Bot 'listens' for a beep (or a not-beep)
        
            Bot senses and collects DATA in cell i
            
                - DATA = Beep
                
                    P( leak is in cell i | we heard a beep while in cell i ) = 0
                    P( leak is in cell j | we heard a beep while in cell i ) for j != i
                    
                    P( leak is in cell j | we heard a beep while in cell i )
                    
                        = P( leak is in cell j AND beep in cell i ) / P( beep in cell i )
                        
                        = P( leak in cell j ) * P( beep in cell i | leak in cell j ) / P( beep in cell i )
                        
                        = P( leak in cell j ) * e^(-a*(d(i,j)-1)) / P( beep in cell i )
                        
                        = P( leak in cell j ) * e^(-a*(d(i,j)-1)) / [ sum_k P( leak in k ) *  e^(-a*(d(i,k)-1)) ]
                        
                        
                                P( beep in cell i ) = sum_k P( leak in k AND beep in cell i )
                                
                                = sum_k P( leak in k ) * P( beep in i | leak in k )
                                
                                = sum_k P( leak in k ) *  e^(-a*(d(i,k)-1))
                
                - DATA = No Beep
                
                    Currently:
                    
                        P( leak is in cell k ) for each cell k
                
                    New Probabilities:
                        For cell i (our current cell): P( leak is in cell i | we heard no beep while in cell i ) = 0
                        For cell j != i : P( leak is in cell j | we heard no beep while in cell i )
                                            = P( leak in cell j ) * ( 1 - e^(-a*(d(i,j)-1)) ) / [ sum_k P( leak is in k ) * ( 1 - e^(-a*(d(i,k)-1)) ) ]
                    
                    
                        
        
        
        - Bot can move to another cell
        
            Bot moves from cell bot_t to cell i
            
                - Bot finds the leak in cell i
                
                    UPDATE
                        Current P( leak is in cell k ) for each cell k
                    
                        New Probabilities:
                
                            For cell i: P( leak in cell i | bot finds the leak in cell i ) = 1
                            For cell j != i: P( leak in cell j | bot finds the leak in cell i ) = 0
                
                - Bot does not find the leak in cell i
                    
                    UPDATE:
                        Current P( leak is in cell k ) for each cell k
                        
                        New Probabilities:
                        
                            For cell i: P( leak is in cell i | bot doesn't find leak in i ) = 0
                            For cell j != i: P( leak is in cell j | bot doesn't find leak in i )
                                                = P( leak is in cell j ) * 1 / (1 - P( leak is in i ))
                    
                        
    
    P( A and B ) = P( A ) * P( B | A )
    
    
    Conditional Probability
    
        P( A | B ) = P( A and B ) / P( B )
        
            -> P( A and B ) = P( B ) * P( A | B )
            -> P( A and B ) = P( A ) * P( B | A )
    


    
    P( leak is in cell i | bot doesn't find leak in i ) = 0
    P( leak is in cell j | bot doesn't find leak in i ) for each j != i
        
    = P( leak is in cell j AND bot doesn't find leak in i ) / P( bot doesn't find leak in i )
        
    = P( leak is in cell j ) * P( bot doesn't find leak in i | leak is in cell j) / P( bot doesn't find leak in i )
    
    = P( leak is in cell j ) * 1 / P( leak is not in i )
    
    = P( leak is in cell j ) * 1 / (1 - P( leak is in i ))
    
    
    
    
    P( leak is in cell j | we heard no beep while in cell i ) for j != i
    
        = P( leak in cell j AND no beep in cell i ) / P( no beep in cell i )
        
        = P( leak in cell j ) * P( no beep in cell i | leak in cell j ) / P( no beep in cell i )
        
        = P( leak in cell j ) * ( 1 - e^(-a*(d(i,j)-1)) ) / P( no beep in cell i )
        
        = P( leak in cell j ) * ( 1 - e^(-a*(d(i,j)-1)) ) / [ sum_k P( leak is in k ) * ( 1 - e^(-a*(d(i,k)-1)) ) ]


    P( no beep in cell i ) = sum_k P( leak is in k AND no beep in cell i ) <- marginalization
    
    = sum_k P( leak is in k ) * P( no beep in cell i | leak is in k )
    
    = sum_k P( leak is in k ) * ( 1 - e^(-a*(d(i,k)-1)) )
                
                
                
                
                
                
                
            SHIP = [ each cell labeled POSSIBLE ]
            
            bot position = initial position
            
            SHIP[ bot position ] = FALSE
            
            total actions = 0
            
            LOOP UNTIL BOT POSITION == LEAK POSITION:
            
                run detection square on BOT POSITION
                total actions += 1
                    
                if detection = POSITIVE:
                    SHIP[ cell ] = FALSE for each cell OUTSIDE detection square
                    
                if detection = NEGATIVE:
                    SHIP[ cell ] = FALSE for each cell in detection square
                    
                next position = cell nearest BOT POSITION s.t. SHIP[ cell ] = POSSIBLE
                
                move BOT POSITION to next position
                total actions += distance( BOT POSITION, next position )
        
            return total actions
                
                
                
                
                
                
                
                
                
            At at any time t:
            
                    next position = cell j that has highest P( leak is in cell j )
                    
                    
                    plan path ( bot position, next position )
                    
                    
                    
        
        Enter cell i, don't find the leak
        
            P( leak is in cell i | you didn't find it in cell i ) = 0
            
            P( leak is in cell j | you didn't find it in cell i ) = P( leak in cell j ) / ( 1 - P( leak in cell i ) )
                

-- New Findings --
Suppose you have five cells, a b c d, e

P(leak in a) = 0.4
P(leak in b) = 0.2
P(leak in c) = 0.1
P(leak in d) = 0.3
P(leak in e) = 0.0

You are currently in cell e

You move to cell d
You do not find the leak

What are P(leak in a | leak not in d), etc, for each cell?

What are the new probabilities?

P( leak in a | leak not in d )
   = P( leak in a and leak not in d ) / P( leak not in d )
   = P( leak in a ) * P( leak not in d | leak in a ) / P( leak not in d)
   = ( P( leak in a ) * 1 ) / P( leak not in d )
   = P( leak in a ) / ( 1 - P ( leak is in d ) )
   = 0.4 / ( 1 - 0.3 ) = 0.4 / 0.7 = 0.57

P( leak in b | leak not in d )
   = P( leak in b and leak not in d ) / P( leak not in d )
   = P( leak in b ) * P( leak not in d | leak in b ) / P( leak not in d)
   = ( P( leak in b ) * 1 ) / P( leak not in d )
   = P( leak in b ) / ( 1 - P ( leak is in d ) )
   = 0.2 / 0.7 = 0.28

P( leak in c | leak not in d )
   = P( leak in c and leak not in d ) / P( leak not in d )
   = P( leak in c ) * P( leak not in d | leak in c ) / P( leak not in d)
   = ( P( leak in c ) * 1 ) / P( leak not in d )
   = P( leak in c ) / ( 1 - P ( leak is in d ) )
   = 0.1 / 0.7 = 0.14

P( leak in d | leak not in d ) = 0

P( leak in e | leak not in d )
   = P( leak in e and leak not in d ) / P( leak not in d )
   = P( leak in e ) * P( leak not in d | leak in e ) / P( leak not in d)
   = ( P( leak in e ) * 1 ) / P( leak not in d )
   = P( leak in e ) / ( 1 - P ( leak is in d ) )
   = 0 / 0.7 = 0

New probabilities
P(leak in a) = 0.57
P(leak in b) = 0.28
P(leak in c) = 0.14
P(leak in d) = 0.0
P(leak in e) = 0.0


-- Seed Example Walkthrough --

KB:
-1     , 0.125  , -1     , -1     , -1     
-1     , 0.125  , -1     , -1     , -1     
0.125  , 0.125  , 0.125  , 0.125  , BOT    
-1     , 0.125  , -1     , -1     , -1     
-1     , 0.125  , -1     , -1     , -1

P( leak in (2, 4) ) = 0
P( leak in (2, 3) ) = 0.125
P( leak in (2, 2) ) = 0.125
P( leak in (2, 1) ) = 0.125
P( leak in (2, 0) ) = 0.125
P( leak in (1, 1) ) = 0.125
P( leak in (0, 1) ) = 0.125
P( leak in (3, 1) ) = 0.125
P( leak in (4, 1) ) = 0.125

T = 0 -> BEEP!

P( leak in (2, 4) | we heard a beep in (2, 4) ) = 0

P( leak in (2, 3) | we heard a beep in (2, 4) )
    = P( leak is in cell (2, 3) AND beep in cell (2, 4) ) / P( beep in cell (2, 4) )
    = P( leak in cell (2, 3) ) * P( beep in cell (2, 4) | leak in cell (2, 3) ) / P( beep in cell (2, 4) )
    = P( leak in cell (2, 3) ) * e^(-a*(d((2, 4),(2, 3))-1)) / P( beep in cell (2, 4) )
    = P( leak in cell (2, 3) ) * e^(-a*(d((2, 4),(2, 3))-1)) / [ sum_k P( leak in k ) *  e^(-a*(d((2, 4),k)-1)) ]
    = 0.125 * e^(-a * 1 - 1) / [ sum_k P( leak in k ) *  e^(-a*(d((2, 4),k)-1)) ]

        [ sum_k P( leak in k ) *  e^(-a*(d((2, 4),k) - 1)) ] =
            0.125 * e^(-a*(d( (2, 4), (2, 4) ) - 1)) +
            0.125 * e^(-a*(d( (2, 4), (2, 3) ) - 1)) +
            0.125 * e^(-a*(d( (2, 4), (2, 2) ) - 1)) + 
            0.125 * e^(-a*(d( (2, 4), (2, 1) ) - 1)) + 
            0.125 * e^(-a*(d( (2, 4), (2, 0) ) - 1)) + 
            0.125 * e^(-a*(d( (2, 4), (1, 1) ) - 1)) + 
            0.125 * e^(-a*(d( (2, 4), (0, 1) ) - 1)) + 
            0.125 * e^(-a*(d( (2, 4), (3, 1) ) - 1)) + 
            0.125 * e^(-a*(d( (2, 4), (4, 1) ) - 1)) =
            
            0.125 * e^(-a*(0 - 1)) +
            0.125 * e^(-a*( 1 - 1 )) +
            0.125 * e^(-a*( 2 - 1)) + 
            0.125 * e^(-a*( 3 - 1 )) + 
            0.125 * e^(-a*( 4 - 1 )) + 
            0.125 * e^(-a*( 4 - 1 )) + 
            0.125 * e^(-a*( 5 - 1 )) + 
            0.125 * e^(-a*( 4 - 1 )) + 
            0.125 * e^(-a*( 5 - 1 )) =

            let a = 1 =>

0.125 * e^(-1( -1 )) +
0.125 * e^(-1( 0 )) +
0.125 * e^(-1( 1)) + 
0.125 * e^(-1( 2 )) + 
0.125 * e^(-1( 3 )) + 
0.125 * e^(-1( 3 )) + 
0.125 * e^(-1( 4 )) + 
0.125 * e^(-1( 3 )) + 
0.125 * e^(-1( 4 )) =

            0.5509361295

        = 0.125 * e^(-a * (1 - 1)) / 0.5509361295
        = 0.125 * 1 / 0.5509361295 = 0.12527175



    
-- multi leaks --
How would you keep track of P( leaks are in cell i and cell j ) for each pair of cells i and j

To keep track of the probability of leaks occurring in each pair of cells i and j, you would typically use a matrix or a similar data structure. Here's a step-by-step approach to do this:

    Initialize a Matrix: Create a matrix where each cell (i,j)(i,j) represents the probability of a leak occurring in both cell i and cell j. If there are nn cells, then the matrix will be of size n×nn×n.

    Set Initial Probabilities: Initially, you can set the probabilities to zero or to some initial value based on prior knowledge or assumptions about the leaks.

    Update Probabilities: Whenever you get new information about leaks in any cell, update the probabilities in the matrix accordingly. This could involve increasing the probability in certain cells based on observed data or patterns.

    Consider Independence or Correlation: If the occurrence of leaks in different cells is independent, the probability of leaks in both cell i and cell j can be calculated as the product of the individual probabilities. However, if there's a correlation (positive or negative) between leaks in different cells, this correlation must be factored into the calculations.

    Efficient Storage for Sparse Data: If most pairs of cells have a zero or near-zero probability of simultaneous leaks, then you might want to use a sparse matrix or a similar data-efficient data structure to save space.

    Regular Updates and Analysis: Continuously update the matrix with new data and analyze it to identify patterns or areas with unusually high probabilities of simultaneous leaks.

    Visualization Tools: For better understanding and analysis, you might use visualization tools to graphically represent the probabilities in the matrix, highlighting areas of concern.

    Statistical and Machine Learning Models: If you have enough data, you could use statistical models or machine learning algorithms to predict and update these probabilities more accurately.

This approach is quite general and can be adapted based on specific details of your situation, such as the nature of the cells, the way leaks occur, and the availability and type of data.
User
You
how would you find the singular cell that has the highest probability of containing the leak with that matrix

To find the singular cell with the highest probability of containing a leak, using the matrix that tracks the probabilities of leaks in pairs of cells, you would need to derive individual probabilities for each cell from this matrix. Here's how you can approach this:

    Sum Across Rows or Columns: For each cell i, calculate the sum of probabilities in either the corresponding row or column of the matrix. This sum represents the combined probability of cell i being involved in a leak with any other cell.

    Normalize If Necessary: If your matrix represents joint probabilities and not just the likelihood of cell i being in a pair with a leak, you might need to normalize these sums to reflect the true individual probability of each cell. The normalization method would depend on how your probabilities are structured and scaled.

    Identify the Maximum: Scan through the summed probabilities to identify the cell with the highest value. This cell is the one most likely to contain a leak, based on the pairwise probabilities in your matrix.

    Consider Independence: If the events of leaks in different cells are independent, this approach might need to be adjusted. In such a case, the probability of a leak in a single cell is not directly related to its joint probabilities with other cells.

    Statistical Considerations: Be aware that this method assumes that the probability of a leak in any cell is somehow related to its probability of being in a leaking pair. If this assumption does not hold, a different approach might be required.

    Check Diagonal Elements: If your matrix includes the probability of each cell leaking by itself (these would typically be the diagonal elements of the matrix), you might also compare these values as part of your analysis.

    Use of Algorithms: Implementing an algorithm to automate this process would be efficient, especially for larger matrices. Most programming languages suitable for mathematical computations (like Python, MATLAB, or R) can handle this task easily.

Remember, the effectiveness of this approach greatly depends on the accuracy and relevance of your pairwise probability data. If the data is not representative or accurate, the findings might be misleading.
User
You
what would an equation look like for finding the highest probability cell?

To formulate an equation for finding the cell with the highest probability of containing a leak, based on a matrix that stores the joint probabilities of leaks for each pair of cells, you would typically sum the probabilities across rows or columns for each cell and then find the cell with the maximum sum. Here's a simplified equation for this process:

Let's assume we have a matrix PP of size n×nn×n, where PijPij​ represents the probability of a leak occurring simultaneously in cells i and j.

    Summing Probabilities for Each Cell: For each cell i, calculate the sum of probabilities across the corresponding row or column. The sum for cell i can be represented as:

    Si=∑j=1nPijSi​=∑j=1n​Pij​

    Here, SiSi​ represents the combined probability of a leak in cell i with any other cell.

    Finding the Maximum: After calculating SiSi​ for each cell, you find the cell with the maximum value of SiSi​. This can be represented as:

    Cell with Highest Probability=argmaxi SiCell with Highest Probability=iargmax​Si​

    In this expression, argmaxi Siiargmax​Si​ finds the value of i for which SiSi​ is the largest.

This approach assumes that the sum of the joint probabilities is a reasonable proxy for the likelihood of a cell being the source of a leak. However, it's important to note that this method might not be accurate if the probabilities of leaks in different cells are not independent or if the joint probabilities do not reflect individual leak likelihoods accurately. The effectiveness of this equation depends on the specific context and the nature of the data in the probability matrix.
User
You
how would we initialize the board if we know there are exactly 2 leaks

If you know there are exactly two leaks on the board, and you need to initialize a matrix to reflect the probabilities of leaks for each pair of cells, you would follow a specific approach. Here's a step-by-step guide to do so:

    Determine the Number of Cells: Let's say your board has nn cells. The total number of cell pairs will be n(n−1)22n(n−1)​ since each cell can be paired with every other cell exactly once.

    Initialize the Matrix: Create an n×nn×n matrix, where each element PijPij​ represents the probability that cells i and j are the ones with the leaks. Initially, you might not have any information to differentiate between pairs of cells, so you could start with an equal probability for each pair.

    Set Initial Probabilities: Since there are exactly two leaks, each pair of cells has an equal initial probability of being the pair with the leaks. The initial probability for each pair would be:

    Pij=1n(n−1)2 for i≠jPij​=2n(n−1)​1​ for i=j

    This means each cell pair has an equal and uniform chance of being the pair with the leaks. For i=ji=j (the same cell), the probability should be set to 0, as a cell cannot be paired with itself.

    Adjust for Any Known Information: If you have additional information about the likelihood of leaks in certain cells or pairs of cells, adjust these probabilities accordingly. For example, if you know a certain cell is less likely to have a leak, you would decrease the probabilities for pairs involving that cell.

    Normalization: Ensure that the sum of all probabilities in the matrix equals 1. This is a standard practice in probability to make sure the total probability distribution is valid.

    Updating the Matrix: As you gather more information or data about where leaks are likely or not likely to be, update the probabilities in the matrix to reflect this new information.

This initial setup provides a starting point. The actual probabilities would likely need to be updated frequently as new data or insights about the leaks become available.